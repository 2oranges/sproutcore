<% content_for('final') do %>
<script>

// Define some standard tests.  We need to test both on a custom enumerable
// and on a real Array.
var EnumerableTests = {
  
  "should get enumerator that iterates through objects": function() {
    var e = src.enumerator() ;
    assertNotEqual(e, null, 'enumerator must not be null');
    
    var idx = 0;
    var cur ;
    while(cur = e.nextObject()) {
      assertEqual(src.objectAt(idx), cur, "object at index %@".fmt(idx)) ;
      idx++;
    }
    
    assertEqual(src.get('length'), idx) ;
  },
  
  "should run forEach() to go through objects": function() {
    var idx = 0;
    
    // save for testing later
    var items = [] ;
    var indexes = [] ;
    var arrays = [] ;
    var targets = [] ;
    
    src.forEach(function(item, index, array) {
      items.push(item);
      indexes.push(index);
      arrays.push(array);
      targets.push(this);
    }, this);
    
    var len = src.get('length') ;
    for(var idx=0;idx<len;idx++) {
      assertEqual(items[idx], src.objectAt(idx)) ;
      assertEqual(indexes[idx], idx) ;
      assertEqual(arrays[idx], src) ;
      assertEqual(targets[idx], this) ;
    }
  },
  
  "should map to values while passing proper params": function() {
    var idx = 0;
    
    // save for testing later
    var items = [] ;
    var indexes = [] ;
    var arrays = [] ;
    var targets = [] ;
    
    var mapped = src.map(function(item, index, array) {
      items.push(item);
      indexes.push(index);
      arrays.push(array);
      targets.push(this);
      
      return index ;
    }, this);
    
    var len = src.get('length') ;
    for(var idx=0;idx<len;idx++) {
      assertEqual(src.objectAt(idx), items[idx], "items") ;
      assertEqual(idx, indexes[idx], "indexes") ;
      assertEqual(src, arrays[idx], 'arrays') ;
      assertEqual(SC.guidFor(this), SC.guidFor(targets[idx]), "this") ;
      
      assertEqual(idx, mapped[idx], "mapped") ;
    }
  },
  
  "should filter to items that return for callback": function() {
    var idx = 0;
    
    // save for testing later
    var items = [] ;
    var indexes = [] ;
    var arrays = [] ;
    var targets = [] ;
    
    var filtered = src.filter(function(item, index, array) {
      items.push(item);
      indexes.push(index);
      arrays.push(array);
      targets.push(this);
  
      return item.gender === "female" ;
    }, this);
    
    var len = src.get('length') ;
    for(var idx=0;idx<len;idx++) {
      assertEqual(src.objectAt(idx), items[idx], "items") ;
      assertEqual(idx, indexes[idx], "indexes") ;
      assertEqual(src, arrays[idx], 'arrays') ;
      assertEqual(SC.guidFor(this), SC.guidFor(targets[idx]), "this") ;
    }
    
    filtered.length.shouldEqual(1) ;
    filtered[0].first.shouldEqual("Jenna") ;
  },
  
  "should return true if function for every() returns true": function() {
    var idx = 0;
    
    // save for testing later
    var items = [] ;
    var indexes = [] ;
    var arrays = [] ;
    var targets = [] ;
    
    var result = src.every(function(item, index, array) {
      items.push(item);
      indexes.push(index);
      arrays.push(array);
      targets.push(this);
  
      return true ;
    }, this);
    
    var len = src.get('length') ;
    for(var idx=0;idx<len;idx++) {
      assertEqual(src.objectAt(idx), items[idx], "items") ;
      assertEqual(idx, indexes[idx], "indexes") ;
      assertEqual(src, arrays[idx], 'arrays') ;
      assertEqual(SC.guidFor(this), SC.guidFor(targets[idx]), "this") ;
    }
  
    assertEqual(result, YES) ;
  },
  
  "should return false if one function for every() returns false": function() {
    var result = src.every(function(item, index, array) {
      return item.gender === "male" ;
    }, this);
    assertEqual(result, NO) ;
  },

  "should return false if all functions for some() returns false": function() {
    var idx = 0;
    
    // save for testing later
    var items = [] ;
    var indexes = [] ;
    var arrays = [] ;
    var targets = [] ;
    
    var result = src.some(function(item, index, array) {
      items.push(item);
      indexes.push(index);
      arrays.push(array);
      targets.push(this);
  
      return false ;
    }, this);
    
    var len = src.get('length') ;
    for(var idx=0;idx<len;idx++) {
      assertEqual(src.objectAt(idx), items[idx], "items") ;
      assertEqual(idx, indexes[idx], "indexes") ;
      assertEqual(src, arrays[idx], 'arrays') ;
      assertEqual(SC.guidFor(this), SC.guidFor(targets[idx]), "this") ;
    }
  
    assertEqual(result, NO) ;
  },
  
  "should return true if one function for some() returns true": function() {
    var result = src.some(function(item, index, array) {
      return item.gender !== "male" ;
    }, this);
    assertEqual(result, YES) ;
  },

    
  "should mapProperty for all items": function() {
    var mapped = src.mapProperty("first") ;
    var idx ;
    var len = src.get('length') ;
    for(idx=0;idx<len;idx++) {
      mapped[idx].shouldEqual(src.objectAt(idx).first) ;
    }
  },
  
  "should filterProperty with match": function() {
    var filtered = src.filterProperty("gender", "female") ;
    filtered.length.shouldEqual(1) ;
    filtered[0].first.shouldEqual("Jenna") ;
  },

  "should filterProperty with default bool": function() {
    var filtered = src.filterProperty("californian") ;
    filtered.length.shouldEqual(1) ;
    filtered[0].first.shouldEqual("Jenna") ;
  },


  
  "everyProperty should return true if all properties macth": function() {
    var ret = src.everyProperty('visited', 'Prague') ;
    assertEqual(YES, ret, "visited") ;
  },

  "everyProperty should return true if all properties true": function() {
    var ret = src.everyProperty('ready') ;
    assertEqual(YES, ret, "ready") ;
  },

  "everyProperty should return false if any properties false": function() {
    var ret = src.everyProperty('gender', 'male') ;
    assertEqual(NO, ret, "ready") ;
  },
  

  "someProperty should return false if all properties not match": function() {
    var ret = src.someProperty('visited', 'Timbuktu') ;
    assertEqual(NO, ret, "visited") ;
  },

  "someProperty should return false if all properties false": function() {
    var ret = src.someProperty('doneTravelling') ;
    assertEqual(NO, ret, "doneTravelling") ;
  },

  "someProperty should return true if any properties true": function() {
    var ret = src.someProperty('first', 'Charles') ;
    assertEqual(YES, ret, "first") ;
  },
  
  "invoke should call method on member objects, passing args and return result": function() {
    var ret = src.invoke("run", "item1", "item2") ;
    var len = src.get('length') ;
    
    assertEqual(len, ret.length, "length of result") ;
    
    for(var idx = 0;idx<len;idx++) {
      var cur = ret[idx] ;
      assertEqual("DONE", cur[0]) ;
      assertEqual("item1", cur[1]) ;
      assertEqual("item2", cur[2]) ;
    }
  }

  
}; 

var DummyEnumerable = SC.Object.extend(SC.Enumerable, {
  
  content: [],
  
  length: function() { return this.content.length; }.property(),
  
  objectAt: function(idx) { return this.content[idx]; },
  
  nextObject: function(idx) { return this.content[idx]; }
}) ;


Test.context("Real Array", SC.mixin(EnumerableTests, {
  
  setup: function() { 
    
    var runFunc = function(a,b) { return ['DONE', a, b]; } ;
    src = [
      { first: "Charles", gender: "male", californian: NO, ready: YES, visited: "Prague", doneTravelling: NO, run: runFunc },
      { first: "Jenna", gender: "female", californian: YES, ready: YES, visited: "Prague", doneTravelling: NO, run: runFunc },
      { first: "Peter", gender: "male", californian: NO, ready: YES, visited: "Prague", doneTravelling: NO, run: runFunc },
      { first: "Chris", gender: "male", californian: NO, ready: YES, visited: "Prague", doneTravelling: NO, run: runFunc } ] ;
  },
  
  teardown: function() { src = null ; }

}));

Test.context("DummyEnumerable", SC.mixin(EnumerableTests, {
  
  setup: function() { 

    var runFunc = function(a,b) { return ['DONE', a, b]; } ;
    src = DummyEnumerable.create({ content: [
      { first: "Charles", gender: "male", californian: NO, ready: YES, visited: "Prague", doneTravelling: NO, run: runFunc },
      { first: "Jenna", gender: "female", californian: YES, ready: YES, visited: "Prague", doneTravelling: NO, run: runFunc },
      { first: "Peter", gender: "male", californian: NO, ready: YES, visited: "Prague", doneTravelling: NO, run: runFunc },
      { first: "Chris", gender: "male", californian: NO, ready: YES, visited: "Prague", doneTravelling: NO, run: runFunc } ] }) ;
  },
  
  teardown: function() { src = null ; }

}));

</script>
<% end %>
